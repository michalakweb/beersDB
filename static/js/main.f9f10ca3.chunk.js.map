{"version":3,"sources":["logo.svg","serviceWorker.js","components/ListItem.js","components/List.js","components/Navigation.js","components/App.js","components/IndividualBeerDetails.js","components/IndividualBeer.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ListItem","props","react_default","a","createElement","Row","Col","className","sm","database","name","xs","abv","ibu","react_router_dom","to","pathname","concat","id","state","oneBeerData","Button","variant","List","ListGroup","map","beer","ListGroupItem","key","components_ListItem","Navigation","Navbar","bg","Brand","src","logo","alt","width","height","App","componentDidMount","myListJSON","localStorage","getItem","data","JSON","parse","_this","setState","fetch","then","resp","json","console","log","myJSON","stringify","setItem","undefined","text","setTimeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","document","querySelectorAll","Symbol","iterator","next","done","value","textContent","includes","scrollIntoView","err","return","components_Navigation","Container","components_List","this","Component","noInfo","IndividualBeerDetails","_ref","_ref$oneBeerData","isOrganic","status","glass","labels","Card","medium","Body","Title","Text","size","IndividualBeer","components_IndividualBeerDetails","React","hashHistory","createHashHistory","basename","process","jsx","react_router","history","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9f10ca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37dfa64d.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\n\r\nconst ListItem = (props) => (\r\n    <div>    \r\n        <Row>\r\n          <Col className='py-4' sm><h4>{props.database.name}</h4></Col>\r\n        </Row>\r\n        <Row className='text-center lead'>\r\n          <Col xs><p>Abv: {props.database.abv ? props.database.abv : '...'}</p></Col>\r\n          <Col xs><p>Ibu: {props.database.ibu ? props.database.ibu : '...'}</p></Col>\r\n          <Col xs>\r\n              <Link to={{\r\n                pathname: `/beer/${props.database.id}`,\r\n                state: {\r\n                  oneBeerData: props.database\r\n                }\r\n              }}><Button variant=\"outline-primary\">Details</Button>\r\n              </Link>\r\n          </Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\nconst List = (props) => (\r\n    <div>        \r\n          \r\n        {   //showing a loading screen before the database loads\r\n            props.database === '' && <p>Loading</p>\r\n        }\r\n        <ListGroup className='my-3'>\r\n        {   //once the database loads, each beer is shown as a separate component\r\n            props.database !== '' && \r\n            props.database.map(beer => \r\n                <ListGroupItem key={beer.id}>\r\n                    <ListItem key={beer.id} database={beer}/>\r\n                </ListGroupItem>)\r\n        }\r\n        </ListGroup>\r\n        \r\n    </div>\r\n)\r\n\r\n\r\nexport default List;","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\n\r\nconst Navigation = () => (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand className='d-flex'>\r\n          <img src={logo} alt=\"Logo\" width=\"50\" height=\"50\" \r\n            className=\"align-self-center\"/>\r\n          <h3 className='align-self-center mb-0 pl-1'>Beer DB</h3>\r\n          </Navbar.Brand>\r\n    </Navbar>\r\n)\r\n\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\r\n\r\n//CSS\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../styles/style.scss';\r\n\r\n// Components\r\nimport List from './List';\r\nimport Navigation from './Navigation';\r\nimport {Container} from 'react-bootstrap';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    database: ''\r\n  }\r\n\r\n  // After component mounts it fetches the database, which (upon success) updates\r\n  // the component state and the LocalStorage (sessionStorage could also be used here)\r\n  componentDidMount = () => {\r\n    const myListJSON = localStorage.getItem('database');\r\n    if(!!myListJSON) {\r\n      const data = JSON.parse(myListJSON);\r\n      this.setState(() => ({\r\n        database: data\r\n      }))\r\n      \r\n    } else {\r\n      fetch('https://cors.io/?https://sandbox-api.brewerydb.com/v2/beers/?key=0e78f8bfabdcbd95f06487ec1c0976e6')\r\n      .then((resp) => resp.json())\r\n      .then(database => {\r\n        console.log(database.data);\r\n\r\n        this.setState(() => ({\r\n          database: database.data\r\n        }))\r\n\r\n        const myJSON = JSON.stringify(database.data);\r\n        localStorage.setItem('database', myJSON);\r\n      })\r\n    }\r\n\r\n    // Scrolling back into the same list item,\r\n    // the name of header is passed from the InvidualBeerPage Link component as a prop \r\n    if(this.props.location.state !== undefined) {\r\n      let text = this.props.location.state.oneBeerData;\r\n      setTimeout(() => {\r\n        for (const a of document.querySelectorAll(\"h4\")) {\r\n          if (a.textContent.includes(text)) {\r\n            a.scrollIntoView()\r\n          }\r\n        }\r\n      }, 1)\r\n    }\r\n    \r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n        <Container>\r\n          <List database={this.state.database}/>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Card, Row, Col, Button } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst noInfo = 'No information'\r\n\r\n// destructuring beer data for some readability\r\n// if information is not provided I still display it, so that the layout can be more uniformal\r\nconst IndividualBeerDetails = ({oneBeerData: {name, abv, ibu, isOrganic, status, glass, labels}}) => (\r\n    <div>\r\n        <Card className='mt-3'>\r\n            <Row>\r\n                { //Rendering a label only if it's available\r\n                    labels && \r\n                    <Col>\r\n                    <img alt='' src={labels.medium} className='d-block mx-auto m-3' />\r\n                    </Col>\r\n                }\r\n                <Col>\r\n                    <Card.Body className='m-3'>\r\n                    <Card.Title>{name ? name : 'Unknown Beer'}</Card.Title>\r\n                    <Card.Text>Abv: {abv ? abv : noInfo}</Card.Text>\r\n                    <Card.Text>Ibu: {ibu ? ibu : noInfo}</Card.Text>\r\n                    <Card.Text>IsOrganic: {isOrganic ? isOrganic : noInfo}</Card.Text>\r\n                    <Card.Text>Status: {status ? status : noInfo}</Card.Text>\r\n                    <Card.Text>Glass: {glass ? glass.name : noInfo}</Card.Text>\r\n                    </Card.Body>\r\n                </Col>\r\n            </Row>\r\n        </Card>\r\n        <Link to={{\r\n            pathname: `/`,\r\n            state: {\r\n              oneBeerData: name\r\n            }\r\n          }}>\r\n        <Button className='mt-2' variant=\"secondary\" size=\"lg\">Back</Button>\r\n        </Link>\r\n    </div>\r\n)\r\n\r\n\r\nexport default IndividualBeerDetails;","import React from 'react';\r\nimport IndividualBeerDetails from './IndividualBeerDetails';\r\nimport Navigation from './Navigation';\r\nimport { Container,  } from 'react-bootstrap';\r\n\r\nclass IndividualBeer extends React.Component {\r\n    state = {\r\n        oneBeerData: 'Loading...'\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if(this.props.location.state === undefined) {\r\n            fetch(`https://cors.io/?https://sandbox-api.brewerydb.com/v2${this.props.location.pathname}/?key=0e78f8bfabdcbd95f06487ec1c0976e6`)\r\n            .then((resp) => resp.json())\r\n            .then(database => {\r\n                this.setState(() => ({\r\n                oneBeerData: database.data\r\n                }))\r\n            })\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>    \r\n                <Navigation />\r\n                <Container className='align-self-center'>\r\n                    {   // If the user reached this page from the list \r\n                        // he will see the results instatly loaded via the Link props\r\n                    this.props.location.state !== undefined && \r\n                    <IndividualBeerDetails oneBeerData={this.props.location.state.oneBeerData}/> \r\n                    \r\n                    // if available: related glass data \r\n                    }\r\n                    {   // If the user reached refreshed the page or went to it directly\r\n                        // the results will be fetched from the API\r\n                        // (LocalStorage could also be used to limit API calls) \r\n                    this.state.oneBeerData === 'Loading...' && \r\n                    this.props.location.state === undefined ? \r\n                    <p>Loading</p> : (this.props.location.state === undefined &&\r\n                    <IndividualBeerDetails oneBeerData={this.state.oneBeerData}/>) \r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default IndividualBeer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//React Router\r\nimport { Router, Route, Switch} from \"react-router-dom\";\r\nimport { createHashHistory } from 'history'\r\n    \r\n//Components\r\nimport App from './components/App';\r\nimport IndividualBeer from './components/IndividualBeer';\r\n\r\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\r\n\r\nconst jsx = (\r\n        <Router history={hashHistory}>\r\n            <Switch>\r\n                <Route exact path='/' component={App}/>\r\n                <Route exact path='/beer/:id' component={IndividualBeer}/>\r\n                <Route component={() => (<div>404 Not found 1</div>)} />\r\n            </Switch>\r\n        </Router>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}