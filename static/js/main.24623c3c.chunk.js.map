{"version":3,"sources":["logo.svg","serviceWorker.js","components/ListItem.js","components/Loading.js","components/List.js","components/Navigation.js","components/App.js","components/IndividualBeerDetails.js","components/IndividualBeer.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ListItem","props","react_default","a","createElement","Row","Col","className","sm","database","name","xs","abv","ibu","react_router_dom","to","pathname","concat","id","state","oneBeerData","Button","variant","Loading","Spinner","animation","List","components_Loading","ListGroup","map","beer","ListGroupItem","key","components_ListItem","Navigation","Navbar","bg","Brand","src","logo","alt","width","height","App","componentDidMount","myListJSON","localStorage","getItem","data","JSON","parse","_this","setState","error","undefined","fetch","then","resp","json","myJSON","stringify","setItem","catch","text","setTimeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","document","querySelectorAll","Symbol","iterator","next","done","value","textContent","includes","scrollIntoView","err","return","components_Navigation","Container","components_List","this","Alert","Component","noInfo","IndividualBeerDetails","_ref","_ref$oneBeerData","isOrganic","status","glass","labels","Card","medium","Body","Title","Text","size","IndividualBeer","components_IndividualBeerDetails","React","hashHistory","createHashHistory","basename","process","jsx","react_router","history","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24623c3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.37dfa64d.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col, Button } from 'react-bootstrap';\r\n\r\nconst ListItem = (props) => (\r\n    <div>    \r\n        <Row>\r\n          <Col className='py-4' sm><h4>{props.database.name}</h4></Col>\r\n        </Row>\r\n        <Row className='text-center lead'>\r\n          <Col xs><p>Abv: {props.database.abv ? props.database.abv : '...'}</p></Col>\r\n          <Col xs><p>Ibu: {props.database.ibu ? props.database.ibu : '...'}</p></Col>\r\n          <Col xs>\r\n              <Link to={{\r\n                pathname: `/beer/${props.database.id}`,\r\n                state: {\r\n                  oneBeerData: props.database\r\n                }\r\n              }}><Button variant=\"outline-primary\">Details</Button>\r\n              </Link>\r\n          </Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport { Spinner, Row, Col } from 'react-bootstrap';\r\n\r\nconst Loading = () => (\r\n    <div>\r\n        <Row className='mt-4'>\r\n            <Col className='d-flex justify-content-center'>\r\n                <Spinner className='align-self-center' animation=\"grow\" />\r\n                <p className='p-2 align-self-center mb-0'><small>Loading...</small></p>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\nexport default Loading;","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport Loading from './Loading';\r\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\n\r\nconst List = (props) => (\r\n    <div>        \r\n          \r\n        {   //showing a loading screen before the database loads\r\n            props.database === '' && <Loading/>\r\n        }\r\n        <ListGroup className='my-3'>\r\n        {   //once the database loads, each beer is shown as a separate component\r\n            props.database !== '' && \r\n            props.database.map(beer => \r\n                <ListGroupItem key={beer.id}>\r\n                    <ListItem key={beer.id} database={beer}/>\r\n                </ListGroupItem>)\r\n        }\r\n        </ListGroup>\r\n        \r\n    </div>\r\n)\r\n\r\n\r\nexport default List;","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\n\r\nconst Navigation = () => (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand className='d-flex'>\r\n          <img src={logo} alt=\"Logo\" width=\"50\" height=\"50\" \r\n            className=\"align-self-center\"/>\r\n          <h3 className='align-self-center mb-0 pl-1'>Beer DB</h3>\r\n          </Navbar.Brand>\r\n    </Navbar>\r\n)\r\n\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\r\n\r\n//CSS\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../styles/style.scss';\r\n\r\n// Components\r\nimport List from './List';\r\nimport Navigation from './Navigation';\r\nimport {Container, Alert} from 'react-bootstrap';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    database: ''\r\n  }\r\n\r\n  // After component mounts it fetches the database, which (upon success) updates\r\n  // the component state and the LocalStorage (sessionStorage could also be used here)\r\n  componentDidMount = () => {\r\n    const myListJSON = localStorage.getItem('database');\r\n    if(!!myListJSON) {\r\n      const data = JSON.parse(myListJSON);\r\n      this.setState(() => ({\r\n        database: data,\r\n        error: undefined\r\n      }))\r\n      \r\n    } else {\r\n      fetch('https://cors.io/?https://sandbox-api.brewerydb.com/v2/beers/?key=0e78f8bfabdcbd95f06487ec1c0976e6')\r\n      .then((resp) => resp.json())\r\n      .then(database => {\r\n        this.setState(() => ({\r\n          database: database.data\r\n        }))\r\n\r\n        const myJSON = JSON.stringify(database.data);\r\n        localStorage.setItem('database', myJSON);\r\n      })\r\n      .catch(error => {\r\n        this.setState(() => ({\r\n          error: error\r\n        }))\r\n      });\r\n    }\r\n\r\n    // Scrolling back into the same list item,\r\n    // the name of header is passed from the InvidualBeerPage Link component as a prop \r\n    if(this.props.location.state !== undefined) {\r\n      let text = this.props.location.state.oneBeerData;\r\n      setTimeout(() => {\r\n        for (const a of document.querySelectorAll(\"h4\")) {\r\n          if (a.textContent.includes(text)) {\r\n            a.scrollIntoView()\r\n          }\r\n        }\r\n      }, 1)\r\n    }\r\n    \r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n        <Container>\r\n          <List database={this.state.database}/>\r\n          {//Error rendering\r\n            this.state.error && \r\n            <Alert className='mt-3' variant='danger'>\r\n            Cannot connect to database. Check your connection or try again later.\r\n            </Alert>\r\n          }\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Card, Row, Col, Button } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst noInfo = 'No information'\r\n\r\n// destructuring beer data for some readability\r\n// if information is not provided I still display it, so that the layout can be more uniformal\r\nconst IndividualBeerDetails = ({oneBeerData: {name, abv, ibu, isOrganic, status, glass, labels}}) => (\r\n    <div>\r\n        <Row>\r\n            <Col>\r\n                <Card className='mt-3'>\r\n                    <Row>\r\n                        { //Rendering a label only if it's available\r\n                            labels && \r\n                            <Col>\r\n                            <img alt='' src={labels.medium} className='d-block mx-auto m-3' />\r\n                            </Col>\r\n                        }\r\n                        <Col>\r\n                            <Card.Body className='m-3'>\r\n                            <Card.Title>{name ? name : 'Unknown Beer'}</Card.Title>\r\n                            <Card.Text>Abv: {abv ? abv : noInfo}</Card.Text>\r\n                            <Card.Text>Ibu: {ibu ? ibu : noInfo}</Card.Text>\r\n                            <Card.Text>IsOrganic: {isOrganic ? isOrganic : noInfo}</Card.Text>\r\n                            <Card.Text>Status: {status ? status : noInfo}</Card.Text>\r\n                            <Card.Text>Glass: {glass ? glass.name : noInfo}</Card.Text>\r\n                            </Card.Body>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col className='d-flex justify-content-end'>\r\n                <Link to={{\r\n                    pathname: `/`,\r\n                    state: {\r\n                    oneBeerData: name\r\n                    }\r\n                }}>\r\n                <Button className='mt-2' variant=\"secondary\" size=\"lg\">Back</Button>\r\n                </Link>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n)\r\n\r\n\r\nexport default IndividualBeerDetails;","import React from 'react';\r\nimport IndividualBeerDetails from './IndividualBeerDetails';\r\nimport Navigation from './Navigation';\r\nimport { Container, Alert } from 'react-bootstrap';\r\nimport Loading from './Loading';\r\n\r\nclass IndividualBeer extends React.Component {\r\n    state = {\r\n        oneBeerData: 'Loading...',\r\n        error: undefined\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if(this.props.location.state === undefined) {\r\n            fetch(`https://cors.io/?https://sandbox-api.brewerydb.com/v2${this.props.location.pathname}/?key=0e78f8bfabdcbd95f06487ec1c0976e6`)\r\n            .then((resp) => resp.json())\r\n            .then(database => {\r\n                this.setState(() => ({\r\n                oneBeerData: database.data\r\n                }))\r\n            })\r\n            .catch(error => {\r\n                this.setState(() => ({\r\n                  error: error\r\n                }))\r\n            });\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>    \r\n                {\r\n                    \r\n                }\r\n                <Navigation />\r\n                <Container className='align-self-center'>\r\n                    {   // If the user reached this page from the list \r\n                        // he will see the results instatly loaded via the Link props\r\n                    this.props.location.state !== undefined && \r\n                    <IndividualBeerDetails oneBeerData={this.props.location.state.oneBeerData}/> \r\n                    }\r\n                    {   // If the user refreshed the page or went to it directly\r\n                        // the results will be fetched from the API\r\n                        // (LocalStorage could also be used to limit API calls) \r\n                    this.state.oneBeerData === 'Loading...' && \r\n                    this.props.location.state === undefined ? \r\n                    <Loading/> : (this.props.location.state === undefined &&\r\n                    <IndividualBeerDetails oneBeerData={this.state.oneBeerData}/>) \r\n                    }\r\n                    {//Error rendering\r\n                        this.state.error && \r\n                        <Alert className='mt-3' variant='danger'>\r\n                        Cannot connect to database. Check your connection or try again later.\r\n                        </Alert>\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default IndividualBeer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//React Router\r\nimport { Router, Route, Switch} from \"react-router-dom\";\r\nimport { createHashHistory } from 'history'\r\n    \r\n//Components\r\nimport App from './components/App';\r\nimport IndividualBeer from './components/IndividualBeer';\r\n\r\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\r\n\r\nconst jsx = (\r\n        <Router history={hashHistory}>\r\n            <Switch>\r\n                <Route exact path='/' component={App}/>\r\n                <Route exact path='/beer/:id' component={IndividualBeer}/>\r\n                <Route component={() => (<div>404 Not found 1</div>)} />\r\n            </Switch>\r\n        </Router>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}